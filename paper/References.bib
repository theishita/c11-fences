@misc{web1, 
    title = {C - C 11 Memory Model: c Tutorial},
    url = {https://riptutorial.com/cplusplus/topic/7975/cplusplus11-memory-model},
    journal = {C - C 11 Memory Model | c Tutorial}
}
    
@misc{web2,
    title={Memory Consistency Models: A Tutorial},
    url={https://www.cs.utexas.edu/~bornholt/post/memory-models.html},
    journal={Memory Consistency Models: A Tutorial}
}
    
@misc{networkx-cycles,
    title={Networkx Cycles},
    url={https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.cycles.simple_cycles.html#id5}
}

@misc{herd, 
	title = {Herd Tool},
	url = {https://github.com/herd/herdtools7},
}
@inproceedings{C11,
	author = {ISO/IEC-JTC1/SC22/WG21},
	title = {Programming Languages — {C++}},
	issue_date = {May 2013},
	year = {2013},
	note = {\url{http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf}},
}

@inproceedings{cds,
author = {Norris, Brian and Demsky, Brian},
title = {CDSchecker: Checking Concurrent Data Structures Written with C/C++ Atomics},
year = {2013},
isbn = {9781450323741},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2509136.2509514},
doi = {10.1145/2509136.2509514},
booktitle = {Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages &amp; Applications},
pages = {131–150},
numpages = {20},
keywords = {relaxed memory model, model checking},
location = {Indianapolis, Indiana, USA},
series = {OOPSLA '13}
}



@inproceedings{abdulla-tso-fences,
	author = {Abdulla, Parosh and Atig, Mohamed Faouzi and Chen, Yu-Fang and Leonardsson, Carl and Rezine, Ahmed},
	year = {2012},
	month = {03},
	pages = {204-219},
	title = {Counter-Example Guided Fence Insertion under TSO},
	doi = {10.1007/978-3-642-28756-5_15}
}
@article{tracer2018,
	title={Optimal stateless model checking under the release-acquire semantics},
	author={Abdulla, Parosh Aziz and Atig, Mohamed Faouzi and Jonsson, Bengt and Ngo, Tuan Phong},
	journal={Proceedings of the ACM on Programming Languages},
	volume={2},
	number={OOPSLA},
	pages={135},
	year={2018},
	publisher={ACM}
}
@inproceedings{LahavVafeiadis-PLDI17,
	author = {Lahav, Ori and Vafeiadis, Viktor and Kang, Jeehoon and Hur, Chung-Kil and Dreyer, Derek},
	title = {Repairing Sequential Consistency in {C/C++11}},
	booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	series = {PLDI 2017},
	year = {2017},
	isbn = {978-1-4503-4988-8},
	url = {http://doi.acm.org/10.1145/3062341.3062352},
	doi = {10.1145/3062341.3062352},
	keywords = {C++11, Weak memory models, declarative semantics, sequential consistency},
}
@article{rcmc-POPL18,
	author = {Kokologiannakis, Michalis and Lahav, Ori and Sagonas, Konstantinos and Vafeiadis, Viktor},
	title = {Effective Stateless Model Checking for {C/C++} Concurrency},
	journal = {Proc. ACM Program. Lang.},
	issue_date = {January 2018},
	volume = {2},
	number = {POPL},
	month = dec,
	year = {2017},
	issn = {2475-1421},
	pages = {17:1--17:32},
	articleno = {17},
	numpages = {32},
	url = {http://doi.acm.org/10.1145/3158105},
	doi = {10.1145/3158105},
	acmid = {3158105},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {C/C++11, RC11, software model checking, weak memory models},
}
@article{genmc-OOPSLA19,
	author = {Kokologiannakis, Michalis and Raad, Azalea and Vafeiadis, Viktor},
	title = {Effective Lock Handling in Stateless Model Checking},
	year = {2019},
	issue_date = {October 2019},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {3},
	number = {OOPSLA},
	url = {https://doi.org/10.1145/3360599},
	doi = {10.1145/3360599},
	journal = {Proc. ACM Program. Lang.},
	month = oct,
	articleno = {173},
	numpages = {26},
	keywords = {Model checking, mutual exclusion locks, weak memory models}
}
@inproceedings{genmc-PLDI19,
	author = {Kokologiannakis, Michalis and Raad, Azalea and Vafeiadis, Viktor},
	title = {Model Checking for Weakly Consistent Libraries},
	year = {2019},
	isbn = {9781450367127},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3314221.3314609},
	doi = {10.1145/3314221.3314609},
	booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	pages = {96–110},
	numpages = {15},
	keywords = {Model checking, weak memory models},
	location = {Phoenix, AZ, USA},
	series = {PLDI 2019}
}

@inproceedings{watts,
author = {Kusano, Markus and Wang, Chao},
title = {Flow-Sensitive Composition of Thread-Modular Abstract Interpretation},
year = {2016},
isbn = {9781450342186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2950290.2950291},
doi = {10.1145/2950290.2950291},
abstract = { We propose a constraint-based flow-sensitive static analysis for concurrent programs by iteratively composing thread-modular abstract interpreters via the use of a system of lightweight constraints. Our method is compositional in that it first applies sequential abstract interpreters to individual threads and then composes their results. It is flow-sensitive in that the causality ordering of interferences (flow of data from global writes to reads) is modeled by a system of constraints. These interference constraints are lightweight since they only refer to the execution order of program statements as opposed to their numerical properties: they can be decided efficiently using an off-the-shelf Datalog engine. Our new method has the advantage of being more accurate than existing, flow-insensitive, static analyzers while remaining scalable and providing the expected soundness and termination guarantees even for programs with unbounded data. We implemented our method and evaluated it on a large number of benchmarks, demonstrating its effectiveness at increasing the accuracy of thread-modular abstract interpretation. },
booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {799–809},
numpages = {11},
keywords = {Concurrency, Datalog, Interference, Abstract interpretation, Invariant generation, Threadmodular reasoning},
location = {Seattle, WA, USA},
series = {FSE 2016}
}
